{"remainingRequest":"E:\\brandsbrother\\victocalls26Nov (1)\\retailapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!E:\\brandsbrother\\victocalls26Nov (1)\\retailapp\\node_modules\\ngx-bootstrap\\utils\\fesm5\\ngx-bootstrap-utils.js","dependencies":[{"path":"E:\\brandsbrother\\victocalls26Nov (1)\\retailapp\\node_modules\\ngx-bootstrap\\utils\\fesm5\\ngx-bootstrap-utils.js","mtime":1543286949535},{"path":"E:\\brandsbrother\\victocalls26Nov (1)\\retailapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1543286741793},{"path":"E:\\brandsbrother\\victocalls26Nov (1)\\retailapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1543286705813}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_core PURE_IMPORTS_END */\nimport { isDevMode } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @copyright Valor Software\n * @copyright Angular ng-bootstrap team\n */\nvar Trigger = /** @class */ /*@__PURE__*/ (function () {\n    function Trigger(open, close) {\n        this.open = open;\n        this.close = close || open;\n    }\n    /**\n     * @return {?}\n     */\n    Trigger.prototype.isManual = /**\n     * @return {?}\n     */\n        function () {\n            return this.open === 'manual' || this.close === 'manual';\n        };\n    return Trigger;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ DEFAULT_ALIASES = {\n    hover: ['mouseover', 'mouseout'],\n    focus: ['focusin', 'focusout']\n};\n/**\n * @param {?} triggers\n * @param {?=} aliases\n * @return {?}\n */\nfunction parseTriggers(triggers, aliases) {\n    if (aliases === void 0) {\n        aliases = DEFAULT_ALIASES;\n    }\n    var /** @type {?} */ trimmedTriggers = (triggers || '').trim();\n    if (trimmedTriggers.length === 0) {\n        return [];\n    }\n    var /** @type {?} */ parsedTriggers = trimmedTriggers\n        .split(/\\s+/)\n        .map(function (trigger) { return trigger.split(':'); })\n        .map(function (triggerPair) {\n        var /** @type {?} */ alias = aliases[triggerPair[0]] || triggerPair;\n        return new Trigger(alias[0], alias[1]);\n    });\n    var /** @type {?} */ manualTriggers = parsedTriggers.filter(function (triggerPair) {\n        return triggerPair.isManual();\n    });\n    if (manualTriggers.length > 1) {\n        throw new Error('Triggers parse error: only one manual trigger is allowed');\n    }\n    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {\n        throw new Error('Triggers parse error: manual trigger can\\'t be mixed with other triggers');\n    }\n    return parsedTriggers;\n}\n/**\n * @param {?} renderer\n * @param {?} target\n * @param {?} triggers\n * @param {?} showFn\n * @param {?} hideFn\n * @param {?} toggleFn\n * @return {?}\n */\nfunction listenToTriggers(renderer, target, triggers, showFn, hideFn, toggleFn) {\n    var /** @type {?} */ parsedTriggers = parseTriggers(triggers);\n    var /** @type {?} */ listeners = [];\n    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\n        return Function.prototype;\n    }\n    parsedTriggers.forEach(function (trigger) {\n        if (trigger.open === trigger.close) {\n            listeners.push(renderer.listen(target, trigger.open, toggleFn));\n            return;\n        }\n        listeners.push(renderer.listen(target, trigger.open, showFn), renderer.listen(target, trigger.close, hideFn));\n    });\n    return function () {\n        listeners.forEach(function (unsubscribeFn) { return unsubscribeFn(); });\n    };\n}\n/**\n * @param {?} renderer\n * @param {?} options\n * @return {?}\n */\nfunction listenToTriggersV2(renderer, options) {\n    var /** @type {?} */ parsedTriggers = parseTriggers(options.triggers);\n    var /** @type {?} */ target = options.target;\n    // do nothing\n    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\n        return Function.prototype;\n    }\n    // all listeners\n    var /** @type {?} */ listeners = [];\n    // lazy listeners registration\n    var /** @type {?} */ _registerHide = [];\n    var /** @type {?} */ registerHide = function () {\n        // add hide listeners to unregister array\n        _registerHide.forEach(function (fn) { return listeners.push(fn()); });\n        // register hide events only once\n        _registerHide.length = 0;\n    };\n    // register open\\close\\toggle listeners\n    parsedTriggers.forEach(function (trigger) {\n        var /** @type {?} */ useToggle = trigger.open === trigger.close;\n        var /** @type {?} */ showFn = useToggle ? options.toggle : options.show;\n        if (!useToggle) {\n            _registerHide.push(function () {\n                return renderer.listen(target, trigger.close, options.hide);\n            });\n        }\n        listeners.push(renderer.listen(target, trigger.open, function () { return showFn(registerHide); }));\n    });\n    return function () {\n        listeners.forEach(function (unsubscribeFn) { return unsubscribeFn(); });\n    };\n}\n/**\n * @param {?} renderer\n * @param {?} options\n * @return {?}\n */\nfunction registerOutsideClick(renderer, options) {\n    if (!options.outsideClick) {\n        return Function.prototype;\n    }\n    return renderer.listen('document', 'click', function (event) {\n        if (options.target && options.target.contains(event.target)) {\n            return;\n        }\n        if (options.targets &&\n            options.targets.some(function (target) { return target.contains(event.target); })) {\n            return;\n        }\n        options.hide();\n    });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/*tslint:disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * JS version of browser APIs. This library can only run in the browser.\n */\nvar /** @type {?} */ win = (typeof window !== 'undefined' && window) || /** @type {?} */ ({});\nvar /** @type {?} */ document$1 = win.document;\nvar /** @type {?} */ location = win.location;\nvar /** @type {?} */ gc = win['gc'] ? function () { return win['gc'](); } : function () { return null; };\nvar /** @type {?} */ performance = win['performance'] ? win['performance'] : null;\nvar /** @type {?} */ Event = win['Event'];\nvar /** @type {?} */ MouseEvent = win['MouseEvent'];\nvar /** @type {?} */ KeyboardEvent = win['KeyboardEvent'];\nvar /** @type {?} */ EventTarget = win['EventTarget'];\nvar /** @type {?} */ History = win['History'];\nvar /** @type {?} */ Location = win['Location'];\nvar /** @type {?} */ EventListener = win['EventListener'];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ guessedVersion;\n/**\n * @return {?}\n */\nfunction _guessBsVersion() {\n    if (typeof document === 'undefined') {\n        return null;\n    }\n    var /** @type {?} */ spanEl = document.createElement('span');\n    spanEl.innerText = 'test bs version';\n    document.body.appendChild(spanEl);\n    spanEl.classList.add('d-none');\n    var /** @type {?} */ rect = spanEl.getBoundingClientRect();\n    document.body.removeChild(spanEl);\n    if (!rect) {\n        return 'bs3';\n    }\n    return rect.top === 0 ? 'bs4' : 'bs3';\n}\n/**\n * @param {?} theme\n * @return {?}\n */\nfunction setTheme(theme) {\n    guessedVersion = theme;\n}\n/**\n * @return {?}\n */\nfunction isBs3() {\n    if (typeof win === 'undefined') {\n        return true;\n    }\n    if (typeof win.__theme === 'undefined') {\n        if (guessedVersion) {\n            return guessedVersion === 'bs3';\n        }\n        guessedVersion = _guessBsVersion();\n        return guessedVersion === 'bs3';\n    }\n    return win.__theme !== 'bs4';\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @template T\n */\nvar /**\n * @template T\n */ LinkedList = /** @class */ /*@__PURE__*/ (function () {\n    function LinkedList() {\n        this.length = 0;\n        this.asArray = [];\n    }\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    LinkedList.prototype.get = /**\n     * @param {?} position\n     * @return {?}\n     */\n        function (position) {\n            if (this.length === 0 || position < 0 || position >= this.length) {\n                return void 0;\n            }\n            var /** @type {?} */ current = this.head;\n            for (var /** @type {?} */ index = 0; index < position; index++) {\n                current = current.next;\n            }\n            return current.value;\n        };\n    /**\n     * @param {?} value\n     * @param {?=} position\n     * @return {?}\n     */\n    LinkedList.prototype.add = /**\n     * @param {?} value\n     * @param {?=} position\n     * @return {?}\n     */\n        function (value, position) {\n            if (position === void 0) {\n                position = this.length;\n            }\n            if (position < 0 || position > this.length) {\n                throw new Error('Position is out of the list');\n            }\n            var /** @type {?} */ node = {\n                value: /** @type {?} */ (value),\n                next: /** @type {?} */ (undefined),\n                previous: /** @type {?} */ (undefined)\n            };\n            if (this.length === 0) {\n                this.head = node;\n                this.tail = node;\n                this.current = node;\n            }\n            else {\n                if (position === 0) {\n                    // first node\n                    node.next = this.head;\n                    this.head.previous = node;\n                    this.head = node;\n                }\n                else if (position === this.length) {\n                    // last node\n                    this.tail.next = node;\n                    node.previous = this.tail;\n                    this.tail = node;\n                }\n                else {\n                    // node in middle\n                    var /** @type {?} */ currentPreviousNode = this.getNode(position - 1);\n                    var /** @type {?} */ currentNextNode = currentPreviousNode.next;\n                    currentPreviousNode.next = node;\n                    currentNextNode.previous = node;\n                    node.previous = currentPreviousNode;\n                    node.next = currentNextNode;\n                }\n            }\n            this.length++;\n            this.createInternalArrayRepresentation();\n        };\n    /**\n     * @param {?=} position\n     * @return {?}\n     */\n    LinkedList.prototype.remove = /**\n     * @param {?=} position\n     * @return {?}\n     */\n        function (position) {\n            if (position === void 0) {\n                position = 0;\n            }\n            if (this.length === 0 || position < 0 || position >= this.length) {\n                throw new Error('Position is out of the list');\n            }\n            if (position === 0) {\n                // first node\n                this.head = this.head.next;\n                if (this.head) {\n                    // there is no second node\n                    this.head.previous = undefined;\n                }\n                else {\n                    // there is no second node\n                    this.tail = undefined;\n                }\n            }\n            else if (position === this.length - 1) {\n                // last node\n                this.tail = this.tail.previous;\n                this.tail.next = undefined;\n            }\n            else {\n                // middle node\n                var /** @type {?} */ removedNode = this.getNode(position);\n                removedNode.next.previous = removedNode.previous;\n                removedNode.previous.next = removedNode.next;\n            }\n            this.length--;\n            this.createInternalArrayRepresentation();\n        };\n    /**\n     * @param {?} position\n     * @param {?} value\n     * @return {?}\n     */\n    LinkedList.prototype.set = /**\n     * @param {?} position\n     * @param {?} value\n     * @return {?}\n     */\n        function (position, value) {\n            if (this.length === 0 || position < 0 || position >= this.length) {\n                throw new Error('Position is out of the list');\n            }\n            var /** @type {?} */ node = this.getNode(position);\n            node.value = value;\n            this.createInternalArrayRepresentation();\n        };\n    /**\n     * @return {?}\n     */\n    LinkedList.prototype.toArray = /**\n     * @return {?}\n     */\n        function () {\n            return this.asArray;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    LinkedList.prototype.findAll = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            var /** @type {?} */ current = this.head;\n            var /** @type {?} */ result = [];\n            for (var /** @type {?} */ index = 0; index < this.length; index++) {\n                if (fn(current.value, index)) {\n                    result.push({ index: index, value: current.value });\n                }\n                current = current.next;\n            }\n            return result;\n        };\n    // Array methods overriding start\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    LinkedList.prototype.push = /**\n     * @param {...?} args\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            args.forEach(function (arg) {\n                _this.add(arg);\n            });\n            return this.length;\n        };\n    /**\n     * @return {?}\n     */\n    LinkedList.prototype.pop = /**\n     * @return {?}\n     */\n        function () {\n            if (this.length === 0) {\n                return undefined;\n            }\n            var /** @type {?} */ last = this.tail;\n            this.remove(this.length - 1);\n            return last.value;\n        };\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    LinkedList.prototype.unshift = /**\n     * @param {...?} args\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            args.reverse();\n            args.forEach(function (arg) {\n                _this.add(arg, 0);\n            });\n            return this.length;\n        };\n    /**\n     * @return {?}\n     */\n    LinkedList.prototype.shift = /**\n     * @return {?}\n     */\n        function () {\n            if (this.length === 0) {\n                return undefined;\n            }\n            var /** @type {?} */ lastItem = this.head.value;\n            this.remove();\n            return lastItem;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    LinkedList.prototype.forEach = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            var /** @type {?} */ current = this.head;\n            for (var /** @type {?} */ index = 0; index < this.length; index++) {\n                fn(current.value, index);\n                current = current.next;\n            }\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    LinkedList.prototype.indexOf = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var /** @type {?} */ current = this.head;\n            var /** @type {?} */ position = 0;\n            for (var /** @type {?} */ index = 0; index < this.length; index++) {\n                if (current.value === value) {\n                    position = index;\n                    break;\n                }\n                current = current.next;\n            }\n            return position;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    LinkedList.prototype.some = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            var /** @type {?} */ current = this.head;\n            var /** @type {?} */ result = false;\n            while (current && !result) {\n                if (fn(current.value)) {\n                    result = true;\n                    break;\n                }\n                current = current.next;\n            }\n            return result;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    LinkedList.prototype.every = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            var /** @type {?} */ current = this.head;\n            var /** @type {?} */ result = true;\n            while (current && result) {\n                if (!fn(current.value)) {\n                    result = false;\n                }\n                current = current.next;\n            }\n            return result;\n        };\n    /**\n     * @return {?}\n     */\n    LinkedList.prototype.toString = /**\n     * @return {?}\n     */\n        function () {\n            return '[Linked List]';\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    LinkedList.prototype.find = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            var /** @type {?} */ current = this.head;\n            var /** @type {?} */ result;\n            for (var /** @type {?} */ index = 0; index < this.length; index++) {\n                if (fn(current.value, index)) {\n                    result = current.value;\n                    break;\n                }\n                current = current.next;\n            }\n            return result;\n        };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    LinkedList.prototype.findIndex = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            var /** @type {?} */ current = this.head;\n            var /** @type {?} */ result;\n            for (var /** @type {?} */ index = 0; index < this.length; index++) {\n                if (fn(current.value, index)) {\n                    result = index;\n                    break;\n                }\n                current = current.next;\n            }\n            return result;\n        };\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    LinkedList.prototype.getNode = /**\n     * @param {?} position\n     * @return {?}\n     */\n        function (position) {\n            if (this.length === 0 || position < 0 || position >= this.length) {\n                throw new Error('Position is out of the list');\n            }\n            var /** @type {?} */ current = this.head;\n            for (var /** @type {?} */ index = 0; index < position; index++) {\n                current = current.next;\n            }\n            return current;\n        };\n    /**\n     * @return {?}\n     */\n    LinkedList.prototype.createInternalArrayRepresentation = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ outArray = [];\n            var /** @type {?} */ current = this.head;\n            while (current) {\n                outArray.push(current.value);\n                current = current.next;\n            }\n            this.asArray = outArray;\n        };\n    return LinkedList;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?=} defaultValue\n * @return {?}\n */\nfunction OnChange(defaultValue) {\n    var /** @type {?} */ sufix = 'Change';\n    return function OnChangeHandler(target, propertyKey) {\n        var /** @type {?} */ _key = \" __\" + propertyKey + \"Value\";\n        Object.defineProperty(target, propertyKey, {\n            get: /**\n             * @return {?}\n             */ function () {\n                return this[_key];\n            },\n            set: /**\n             * @param {?} value\n             * @return {?}\n             */ function (value) {\n                var /** @type {?} */ prevValue = this[_key];\n                this[_key] = value;\n                if (prevValue !== value && this[propertyKey + sufix]) {\n                    this[propertyKey + sufix].emit(value);\n                }\n            }\n        });\n    };\n}\n/* tslint:enable */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar Utils = /** @class */ /*@__PURE__*/ (function () {\n    function Utils() {\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    Utils.reflow = /**\n     * @param {?} element\n     * @return {?}\n     */\n        function (element) {\n            (function (bs) { return bs; })(element.offsetHeight);\n        };\n    // source: https://github.com/jquery/jquery/blob/master/src/css/var/getStyles.js\n    /**\n     * @param {?} elem\n     * @return {?}\n     */\n    Utils.getStyles = /**\n     * @param {?} elem\n     * @return {?}\n     */\n        function (elem) {\n            // Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n            // IE throws on elements created in popups\n            // FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n            var /** @type {?} */ view = elem.ownerDocument.defaultView;\n            if (!view || !view.opener) {\n                view = win;\n            }\n            return view.getComputedStyle(elem);\n        };\n    return Utils;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ _messagesHash = {};\nvar /** @type {?} */ _hideMsg = typeof console === 'undefined' || !('warn' in console);\n/**\n * @param {?} msg\n * @return {?}\n */\nfunction warnOnce(msg) {\n    if (!isDevMode() || _hideMsg || msg in _messagesHash) {\n        return;\n    }\n    _messagesHash[msg] = true;\n    /*tslint:disable-next-line*/\n    console.warn(msg);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { isBs3, LinkedList, listenToTriggersV2, registerOutsideClick, OnChange, setTheme, Trigger, Utils, win as window, document$1 as document, warnOnce, parseTriggers, listenToTriggers };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",null]}