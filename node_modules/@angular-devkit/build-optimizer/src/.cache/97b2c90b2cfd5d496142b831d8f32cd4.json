{"remainingRequest":"D:\\kaushik\\retailapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\kaushik\\retailapp\\node_modules\\ng-multiselect-dropdown\\esm5\\ng-multiselect-dropdown.js","dependencies":[{"path":"D:\\kaushik\\retailapp\\node_modules\\ng-multiselect-dropdown\\esm5\\ng-multiselect-dropdown.js","mtime":1543477202000},{"path":"D:\\kaushik\\retailapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1543286742000},{"path":"D:\\kaushik\\retailapp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1543286706000}],"contextDependencies":[],"result":["import { Component, HostListener, forwardRef, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, Directive, ElementRef, Pipe, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nvar ListItem = /** @class */ /*@__PURE__*/ (function () {\n    function ListItem(source) {\n        if (typeof source === 'string') {\n            this.id = this.text = source;\n        }\n        if (typeof source === 'object') {\n            this.id = source.id;\n            this.text = source.text;\n        }\n    }\n    return ListItem;\n}());\nvar DROPDOWN_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MultiSelectComponent; }),\n    multi: true\n};\nvar noop = function () { };\nvar MultiSelectComponent = /** @class */ /*@__PURE__*/ (function () {\n    function MultiSelectComponent(cdr) {\n        this.cdr = cdr;\n        this._data = [];\n        this.selectedItems = [];\n        this.isDropdownOpen = false;\n        this._placeholder = 'Select';\n        this.filter = new ListItem(this.data);\n        this.defaultSettings = {\n            singleSelection: false,\n            idField: 'id',\n            textField: 'text',\n            enableCheckAll: true,\n            selectAllText: 'Select All',\n            unSelectAllText: 'UnSelect All',\n            allowSearchFilter: false,\n            limitSelection: -1,\n            clearSearchFilter: true,\n            maxHeight: 197,\n            itemsShowLimit: 999999999999,\n            searchPlaceholderText: 'Search',\n            closeDropDownOnSelection: false\n        };\n        this.disabled = false;\n        this.onFilterChange = new EventEmitter();\n        this.onSelect = new EventEmitter();\n        this.onDeSelect = new EventEmitter();\n        this.onSelectAll = new EventEmitter();\n        this.onDeSelectAll = new EventEmitter();\n        this.onTouchedCallback = noop;\n        this.onChangeCallback = noop;\n    }\n    Object.defineProperty(MultiSelectComponent.prototype, \"placeholder\", {\n        set: function (value) {\n            if (value) {\n                this._placeholder = value;\n            }\n            else {\n                this._placeholder = 'Select';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"settings\", {\n        set: function (value) {\n            if (value) {\n                this._settings = Object.assign(this.defaultSettings, value);\n            }\n            else {\n                this._settings = Object.assign(this.defaultSettings);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiSelectComponent.prototype, \"data\", {\n        set: function (value) {\n            var _this = this;\n            if (!value) {\n                this._data = [];\n            }\n            else {\n                var _items = value.filter(function (item) {\n                    if (typeof item === 'string' || (typeof item === 'object' && item && item[_this._settings.idField] && item[_this._settings.textField])) {\n                        return item;\n                    }\n                });\n                this._data = _items.map(function (item) {\n                    return typeof item === 'string'\n                        ? new ListItem(item)\n                        : new ListItem({\n                            id: item[_this._settings.idField],\n                            text: item[_this._settings.textField]\n                        });\n                });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MultiSelectComponent.prototype.onFilterTextChange = function ($event) {\n        this.onFilterChange.emit($event);\n    };\n    MultiSelectComponent.prototype.onItemClick = function ($event, item) {\n        if (this.disabled) {\n            return false;\n        }\n        var found = this.isSelected(item);\n        var allowAdd = this._settings.limitSelection === -1 || (this._settings.limitSelection > 0 && this.selectedItems.length < this._settings.limitSelection);\n        if (!found) {\n            if (allowAdd) {\n                this.addSelected(item);\n            }\n        }\n        else {\n            this.removeSelected(item);\n        }\n        if (this._settings.singleSelection && this._settings.closeDropDownOnSelection) {\n            this.closeDropdown();\n        }\n    };\n    MultiSelectComponent.prototype.writeValue = function (value) {\n        var _this = this;\n        if (value !== undefined && value !== null && value.length > 0) {\n            if (this._settings.singleSelection) {\n                try {\n                    if (value.length >= 1) {\n                        var firstItem = value[0];\n                        this.selectedItems = [\n                            typeof firstItem === 'string'\n                                ? new ListItem(firstItem)\n                                : new ListItem({\n                                    id: firstItem[this._settings.idField],\n                                    text: firstItem[this._settings.textField]\n                                })\n                        ];\n                    }\n                }\n                catch (e) {\n                }\n            }\n            else {\n                var _data = value.map(function (item) {\n                    return typeof item === 'string'\n                        ? new ListItem(item)\n                        : new ListItem({\n                            id: item[_this._settings.idField],\n                            text: item[_this._settings.textField]\n                        });\n                });\n                if (this._settings.limitSelection > 0) {\n                    this.selectedItems = _data.splice(0, this._settings.limitSelection);\n                }\n                else {\n                    this.selectedItems = _data;\n                }\n            }\n        }\n        else {\n            this.selectedItems = [];\n        }\n        this.onChangeCallback(value);\n    };\n    MultiSelectComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    MultiSelectComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    MultiSelectComponent.prototype.onTouched = function () {\n        this.closeDropdown();\n        this.onTouchedCallback();\n    };\n    MultiSelectComponent.prototype.trackByFn = function (index, item) {\n        return item.id;\n    };\n    MultiSelectComponent.prototype.isSelected = function (clickedItem) {\n        var found = false;\n        this.selectedItems.forEach(function (item) {\n            if (clickedItem.id === item.id) {\n                found = true;\n            }\n        });\n        return found;\n    };\n    MultiSelectComponent.prototype.isLimitSelectionReached = function () {\n        return this._settings.limitSelection === this.selectedItems.length;\n    };\n    MultiSelectComponent.prototype.isAllItemsSelected = function () {\n        return this._data.length === this.selectedItems.length;\n    };\n    MultiSelectComponent.prototype.showButton = function () {\n        if (!this._settings.singleSelection) {\n            if (this._settings.limitSelection > 0) {\n                return false;\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    MultiSelectComponent.prototype.itemShowRemaining = function () {\n        return this.selectedItems.length - Number(this._settings.itemsShowLimit);\n    };\n    MultiSelectComponent.prototype.addSelected = function (item) {\n        if (this._settings.singleSelection) {\n            this.selectedItems = [];\n            this.selectedItems.push(item);\n        }\n        else {\n            this.selectedItems.push(item);\n        }\n        this.onChangeCallback(this.emittedValue(this.selectedItems));\n        this.onSelect.emit(this.emittedValue(item));\n    };\n    MultiSelectComponent.prototype.removeSelected = function (itemSel) {\n        var _this = this;\n        this.selectedItems.forEach(function (item) {\n            if (itemSel.id === item.id) {\n                _this.selectedItems.splice(_this.selectedItems.indexOf(item), 1);\n            }\n        });\n        this.onChangeCallback(this.emittedValue(this.selectedItems));\n        this.onDeSelect.emit(this.emittedValue(itemSel));\n    };\n    MultiSelectComponent.prototype.emittedValue = function (val) {\n        var _this = this;\n        var selected = [];\n        if (Array.isArray(val)) {\n            val.map(function (item) {\n                if (item.id === item.text) {\n                    selected.push(item.text);\n                }\n                else {\n                    selected.push(_this.objectify(item));\n                }\n            });\n        }\n        else {\n            if (val) {\n                if (val.id === val.text) {\n                    return val.text;\n                }\n                else {\n                    return this.objectify(val);\n                }\n            }\n        }\n        return selected;\n    };\n    MultiSelectComponent.prototype.objectify = function (val) {\n        var obj = {};\n        obj[this._settings.idField] = val.id;\n        obj[this._settings.textField] = val.text;\n        return obj;\n    };\n    MultiSelectComponent.prototype.toggleDropdown = function (evt) {\n        evt.preventDefault();\n        if (this.disabled && this._settings.singleSelection) {\n            return;\n        }\n        this.isDropdownOpen = !this.isDropdownOpen;\n    };\n    MultiSelectComponent.prototype.closeDropdown = function () {\n        this.isDropdownOpen = false;\n        if (this._settings.clearSearchFilter) {\n            this.filter.text = '';\n        }\n    };\n    MultiSelectComponent.prototype.toggleSelectAll = function () {\n        if (this.disabled) {\n            return false;\n        }\n        if (!this.isAllItemsSelected()) {\n            this.selectedItems = this._data.slice();\n            this.onSelectAll.emit(this.emittedValue(this.selectedItems));\n        }\n        else {\n            this.selectedItems = [];\n            this.onDeSelectAll.emit(this.emittedValue(this.selectedItems));\n        }\n        this.onChangeCallback(this.emittedValue(this.selectedItems));\n    };\n    return MultiSelectComponent;\n}());\nvar ClickOutsideDirective = /** @class */ /*@__PURE__*/ (function () {\n    function ClickOutsideDirective(_elementRef) {\n        this._elementRef = _elementRef;\n        this.clickOutside = new EventEmitter();\n    }\n    ClickOutsideDirective.prototype.onClick = function (event, targetElement) {\n        if (!targetElement) {\n            return;\n        }\n        var clickedInside = this._elementRef.nativeElement.contains(targetElement);\n        if (!clickedInside) {\n            this.clickOutside.emit(event);\n        }\n    };\n    return ClickOutsideDirective;\n}());\nvar ListFilterPipe = /** @class */ /*@__PURE__*/ (function () {\n    function ListFilterPipe() {\n    }\n    ListFilterPipe.prototype.transform = function (items, filter) {\n        var _this = this;\n        if (!items || !filter) {\n            return items;\n        }\n        return items.filter(function (item) { return _this.applyFilter(item, filter); });\n    };\n    ListFilterPipe.prototype.applyFilter = function (item, filter) {\n        return !(filter.text && item.text && item.text.toLowerCase().indexOf(filter.text.toLowerCase()) === -1);\n    };\n    return ListFilterPipe;\n}());\nvar NgMultiSelectDropDownModule = /** @class */ /*@__PURE__*/ (function () {\n    function NgMultiSelectDropDownModule() {\n    }\n    NgMultiSelectDropDownModule.forRoot = function () {\n        return {\n            ngModule: NgMultiSelectDropDownModule\n        };\n    };\n    return NgMultiSelectDropDownModule;\n}());\nexport { MultiSelectComponent, NgMultiSelectDropDownModule, ClickOutsideDirective as ɵb, ListFilterPipe as ɵc, DROPDOWN_CONTROL_VALUE_ACCESSOR as ɵa };\n//# sourceMappingURL=ng-multiselect-dropdown.js.map\n",null]}